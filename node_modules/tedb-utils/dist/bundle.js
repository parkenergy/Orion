module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/UTCtoLocaleDate.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const addHours_1 = __webpack_require__("./src/addHours.ts");
exports.UTCtoLocaleDate = (date) => {
    return addHours_1.addHours(date.toUTCString(), new Date().getTimezoneOffset() / 60);
};


/***/ }),

/***/ "./src/addHours.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.addHours = (d, h) => new Date(new Date(d).setTime(new Date(d).getTime() + (h * 60 * 60 * 1000)));


/***/ }),

/***/ "./src/compressObj.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.compressObj = (obj, tgt = {}, path = []) => {
    Object.keys(obj).forEach((key) => {
        if (Object(obj[key]) === obj[key] &&
            (Object.prototype.toString.call(obj[key]) === "[object Object]") ||
            (Object.prototype.toString.call(obj[key]) === "[object Array]")) {
            return exports.compressObj(obj[key], tgt, path.concat(key));
        }
        else {
            tgt[path.concat(key).join(".")] = obj[key];
        }
    });
    return tgt;
};


/***/ }),

/***/ "./src/dateToUTC.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dateToUTC = (date) => {
    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
};


/***/ }),

/***/ "./src/debounce.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function debounce(fn, wait) {
    let inDebounce;
    return function (...args) {
        const context = this;
        clearTimeout(inDebounce);
        inDebounce = setTimeout(() => fn.apply(context, args), wait);
    };
}
exports.debounce = debounce;
;


/***/ }),

/***/ "./src/expandObj.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const isIndex = (k) => {
    return /^\d+/.test(k);
};
const fill = (arr, obj, value) => {
    const k = arr.shift();
    if (arr.length > 0) {
        obj[k] = obj[k] || (isIndex(arr[0]) ? [] : {});
        fill(arr, obj[k], value);
    }
    else {
        obj[k] = value;
    }
};
exports.expandObj = (obj) => {
    Object.keys(obj).forEach((k) => {
        if (k.indexOf(".") !== -1) {
            fill(k.split("."), obj, obj[k]);
            delete obj[k];
        }
    });
    return obj;
};


/***/ }),

/***/ "./src/findObjArrIndex.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const getObjValue_1 = __webpack_require__("./src/getObjValue.ts");
function findObjArrIndex(objs, path, value) {
    return objs.reduce((acc, cur, ind) => {
        if (getObjValue_1.getObjValue(cur, path) === value) {
            return ind;
        }
        else {
            return acc;
        }
    }, 0);
}
exports.findObjArrIndex = findObjArrIndex;


/***/ }),

/***/ "./src/flattenArr.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function flattenArr(arr) {
    const toString = Object.prototype.toString;
    const arrayTypeStr = "[object Array]";
    const result = [];
    const nodes = arr.slice();
    let node;
    if (!arr.length) {
        return result;
    }
    node = nodes.pop();
    do {
        if (toString.call(node) === arrayTypeStr) {
            nodes.push.apply(nodes, node);
        }
        else {
            result.push(node);
        }
    } while (nodes.length && (node = nodes.pop()) !== undefined);
    result.reverse();
    return result;
}
exports.flattenArr = flattenArr;


/***/ }),

/***/ "./src/getArrDups.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getArrDups = (arr1, arr2) => {
    return arr1.filter((val) => arr2.indexOf(val) !== -1);
};


/***/ }),

/***/ "./src/getObjValue.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getObjValue = (obj, path) => {
    return path.split(".").reduce((o, i) => {
        if (o !== undefined) {
            return o[i];
        }
    }, obj);
};


/***/ }),

/***/ "./src/index.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var rmArrDups_1 = __webpack_require__("./src/rmArrDups.ts");
exports.rmArrDups = rmArrDups_1.rmArrDups;
var flattenArr_1 = __webpack_require__("./src/flattenArr.ts");
exports.flattenArr = flattenArr_1.flattenArr;
var getArrDups_1 = __webpack_require__("./src/getArrDups.ts");
exports.getArrDups = getArrDups_1.getArrDups;
var range_1 = __webpack_require__("./src/range.ts");
exports.range = range_1.range;
var saveArrDups_1 = __webpack_require__("./src/saveArrDups.ts");
exports.saveArrDups = saveArrDups_1.saveArrDups;
var getObjValue_1 = __webpack_require__("./src/getObjValue.ts");
exports.getObjValue = getObjValue_1.getObjValue;
var rmArrObjDups_1 = __webpack_require__("./src/rmArrObjDups.ts");
exports.rmArrObjDups = rmArrObjDups_1.rmArrObjDups;
var isEmpty_1 = __webpack_require__("./src/isEmpty.ts");
exports.isEmpty = isEmpty_1.isEmpty;
var expandObj_1 = __webpack_require__("./src/expandObj.ts");
exports.expandObj = expandObj_1.expandObj;
var compressObj_1 = __webpack_require__("./src/compressObj.ts");
exports.compressObj = compressObj_1.compressObj;
var debounce_1 = __webpack_require__("./src/debounce.ts");
exports.debounce = debounce_1.debounce;
var findObjArrIndex_1 = __webpack_require__("./src/findObjArrIndex.ts");
exports.findObjArrIndex = findObjArrIndex_1.findObjArrIndex;
var setObjValue_1 = __webpack_require__("./src/setObjValue.ts");
exports.setObjValue = setObjValue_1.setObjValue;
var dateToUTC_1 = __webpack_require__("./src/dateToUTC.ts");
exports.dateToUTC = dateToUTC_1.dateToUTC;
var addHours_1 = __webpack_require__("./src/addHours.ts");
exports.addHours = addHours_1.addHours;
var UTCtoLocaleDate_1 = __webpack_require__("./src/UTCtoLocaleDate.ts");
exports.UTCtoLocaleDate = UTCtoLocaleDate_1.UTCtoLocaleDate;


/***/ }),

/***/ "./src/isEmpty.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isEmpty = (obj) => {
    if (!obj && obj !== 0) {
        return true;
    }
    return (!(typeof (obj) === "number") && !Object.keys(obj).length && Object.prototype.toString.call(obj) !== '[object Date]');
};


/***/ }),

/***/ "./src/range.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const numRange = (start, end) => {
    const total = [];
    if (start < end) {
        for (let i = end; i >= start; i--) {
            total.push(i);
        }
    }
    else if (start > end) {
        for (let i = start; i >= end; i--) {
            total.push(i);
        }
    }
    else {
        total.push(start);
    }
    return total;
};
const utf8Range = (start, end) => {
    const all = [];
    const s = typeof start === "string" ? start.charCodeAt(0) : start;
    const e = typeof end === "string" ? end.charCodeAt(0) : end;
    if (s < e) {
        for (let i = s; i <= e; i++) {
            all.push(String.fromCharCode(i));
        }
    }
    else if (s > e) {
        for (let i = s; i >= e; i--) {
            all.push(String.fromCharCode(i));
        }
    }
    else {
        all.push(String.fromCharCode(s));
    }
    return all;
};
exports.range = (start, end) => {
    let all = [];
    if (typeof start === "string" && typeof end === "string") {
        all = utf8Range(start, end);
    }
    else if (typeof start === "number" && typeof end === "number") {
        all = numRange(start, end);
    }
    else {
        throw new Error("Did not supply matching types number or string.");
    }
    return all;
};


/***/ }),

/***/ "./src/rmArrDups.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function rmArrDups(arr) {
    const seen = {};
    const ret = [];
    for (let i = 0; i < arr.length; i++) {
        if (!(arr[i] in seen)) {
            ret.push(arr[i]);
            seen[arr[i]] = true;
        }
    }
    return ret;
}
exports.rmArrDups = rmArrDups;


/***/ }),

/***/ "./src/rmArrObjDups.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.rmArrObjDups = (arr, field) => {
    return arr.filter((obj, pos, ray) => {
        return (pos === ray.findIndex((t) => {
            return t[field] === obj[field];
        }));
    });
};


/***/ }),

/***/ "./src/saveArrDups.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const getArrDups_1 = __webpack_require__("./src/getArrDups.ts");
exports.saveArrDups = (arr) => {
    return new Promise((resolve, reject) => {
        let clear = false;
        const val = arr.reduce((init, item, index) => {
            if (init.length === 0) {
                if (clear) {
                    return init.concat([]);
                }
                else if (item.length === 0) {
                    clear = true;
                    return init.concat([]);
                }
                else if (index === 0) {
                    return init.concat(item);
                }
                else {
                    clear = true;
                    return [];
                }
            }
            else {
                if (item.length === 0) {
                    clear = true;
                    return [];
                }
                else {
                    return getArrDups_1.getArrDups(init, item);
                }
            }
        }, []);
        resolve(val);
    });
};


/***/ }),

/***/ "./src/setObjValue.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.setObjValue = (obj, path, value) => {
    if (typeof path === 'string') {
        return exports.setObjValue(obj, path.split('.'), value);
    }
    else if (path.length === 1) {
        return obj[path[0]] = value;
    }
    else if (path.length === 0) {
        return obj;
    }
    else {
        return exports.setObjValue(obj[path[0]], path.slice(1), value);
    }
};


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,